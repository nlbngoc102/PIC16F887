CCS PCM C Compiler, Version 5.015, 5967               05-Thg8-24 00:06

               Filename:   C:\Users\Admin\Documents\NN_VXL_KTS\N\RV_SE\HK1_15-16\CAU2.lst

               ROM used:   613 words (7%)
                           Largest free fragment is 2048
               RAM used:   9 (2%) at main() level
                           14 (4%) worst case
               Stack used: 2 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   180
0003:  NOP
.................... #include<16f887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  DATA C4,27
0005:  DATA CE,23
0006:  DATA A0,21
0007:  DATA 4F,10
0008:  DATA C4,21
0009:  DATA 00,00
000A:  DATA CC,22
000B:  DATA D6,22
000C:  DATA 4C,1D
000D:  DATA 25,19
000E:  DATA 75,00
*
0051:  MOVLW  10
0052:  MOVWF  28
0053:  CLRF   77
0054:  CLRF   7A
0055:  RRF    25,F
0056:  RRF    24,F
0057:  BTFSS  03.0
0058:  GOTO   05F
0059:  MOVF   26,W
005A:  ADDWF  77,F
005B:  BTFSC  03.0
005C:  INCF   7A,F
005D:  MOVF   27,W
005E:  ADDWF  7A,F
005F:  RRF    7A,F
0060:  RRF    77,F
0061:  RRF    79,F
0062:  RRF    78,F
0063:  DECFSZ 28,F
0064:  GOTO   055
0065:  BCF    0A.3
0066:  BCF    0A.4
0067:  GOTO   231 (RETURN)
*
0083:  MOVF   0B,W
0084:  MOVWF  22
0085:  BCF    0B.7
0086:  BSF    03.5
0087:  BSF    03.6
0088:  BSF    0C.7
0089:  BSF    0C.0
008A:  NOP
008B:  NOP
008C:  BCF    03.5
008D:  BCF    03.6
008E:  BTFSC  22.7
008F:  BSF    0B.7
0090:  BSF    03.6
0091:  MOVF   0C,W
0092:  ANDLW  7F
0093:  BTFSC  03.2
0094:  GOTO   0D7
0095:  BCF    03.6
0096:  MOVWF  22
0097:  BSF    03.6
0098:  MOVF   0D,W
0099:  BCF    03.6
009A:  MOVWF  23
009B:  BSF    03.6
009C:  MOVF   0F,W
009D:  BCF    03.6
009E:  MOVWF  24
009F:  MOVF   22,W
00A0:  MOVWF  26
00A1:  CALL   068
00A2:  MOVF   23,W
00A3:  BSF    03.6
00A4:  MOVWF  0D
00A5:  BCF    03.6
00A6:  MOVF   24,W
00A7:  BSF    03.6
00A8:  MOVWF  0F
00A9:  BCF    03.6
00AA:  MOVF   0B,W
00AB:  MOVWF  25
00AC:  BCF    0B.7
00AD:  BSF    03.5
00AE:  BSF    03.6
00AF:  BSF    0C.7
00B0:  BSF    0C.0
00B1:  NOP
00B2:  NOP
00B3:  BCF    03.5
00B4:  BCF    03.6
00B5:  BTFSC  25.7
00B6:  BSF    0B.7
00B7:  BSF    03.6
00B8:  RLF    0C,W
00B9:  RLF    0E,W
00BA:  ANDLW  7F
00BB:  BTFSC  03.2
00BC:  GOTO   0D7
00BD:  BCF    03.6
00BE:  MOVWF  22
00BF:  BSF    03.6
00C0:  MOVF   0D,W
00C1:  BCF    03.6
00C2:  MOVWF  23
00C3:  BSF    03.6
00C4:  MOVF   0F,W
00C5:  BCF    03.6
00C6:  MOVWF  24
00C7:  MOVF   22,W
00C8:  MOVWF  26
00C9:  CALL   068
00CA:  MOVF   23,W
00CB:  BSF    03.6
00CC:  MOVWF  0D
00CD:  BCF    03.6
00CE:  MOVF   24,W
00CF:  BSF    03.6
00D0:  MOVWF  0F
00D1:  INCF   0D,F
00D2:  BTFSC  03.2
00D3:  INCF   0F,F
00D4:  BCF    03.6
00D5:  GOTO   083
00D6:  BSF    03.6
00D7:  BCF    03.6
00D8:  BCF    0A.3
00D9:  BCF    0A.4
00DA:  GOTO   251 (RETURN)
00DB:  MOVF   0B,W
00DC:  MOVWF  23
00DD:  BCF    0B.7
00DE:  BSF    03.5
00DF:  BSF    03.6
00E0:  BSF    0C.7
00E1:  BSF    0C.0
00E2:  NOP
00E3:  NOP
00E4:  BCF    03.5
00E5:  BCF    03.6
00E6:  BTFSC  23.7
00E7:  BSF    0B.7
00E8:  BTFSC  03.0
00E9:  GOTO   112
00EA:  BSF    03.6
00EB:  MOVF   0C,W
00EC:  ANDLW  7F
00ED:  BCF    03.6
00EE:  MOVWF  23
00EF:  BSF    03.6
00F0:  MOVF   0D,W
00F1:  BCF    03.6
00F2:  MOVWF  24
00F3:  BSF    03.6
00F4:  MOVF   0F,W
00F5:  BCF    03.6
00F6:  MOVWF  25
00F7:  MOVF   23,W
00F8:  MOVWF  26
00F9:  CALL   068
00FA:  MOVF   24,W
00FB:  BSF    03.6
00FC:  MOVWF  0D
00FD:  BCF    03.6
00FE:  MOVF   25,W
00FF:  BSF    03.6
0100:  MOVWF  0F
0101:  BCF    03.6
0102:  MOVF   0B,W
0103:  MOVWF  26
0104:  BCF    0B.7
0105:  BSF    03.5
0106:  BSF    03.6
0107:  BSF    0C.7
0108:  BSF    0C.0
0109:  NOP
010A:  NOP
010B:  BCF    03.5
010C:  BCF    03.6
010D:  BTFSC  26.7
010E:  BSF    0B.7
010F:  DECFSZ 22,F
0110:  GOTO   112
0111:  GOTO   131
0112:  BSF    03.6
0113:  RLF    0C,W
0114:  RLF    0E,W
0115:  ANDLW  7F
0116:  BCF    03.6
0117:  MOVWF  23
0118:  BSF    03.6
0119:  MOVF   0D,W
011A:  BCF    03.6
011B:  MOVWF  24
011C:  BSF    03.6
011D:  MOVF   0F,W
011E:  BCF    03.6
011F:  MOVWF  25
0120:  MOVF   23,W
0121:  MOVWF  26
0122:  CALL   068
0123:  MOVF   24,W
0124:  BSF    03.6
0125:  MOVWF  0D
0126:  BCF    03.6
0127:  MOVF   25,W
0128:  BSF    03.6
0129:  MOVWF  0F
012A:  INCF   0D,F
012B:  BTFSC  03.2
012C:  INCF   0F,F
012D:  BCF    03.0
012E:  BCF    03.6
012F:  DECFSZ 22,F
0130:  GOTO   0DB
0131:  BCF    0A.3
0132:  BCF    0A.4
0133:  GOTO   25E (RETURN)
0134:  MOVF   25,W
0135:  CLRF   78
0136:  SUBWF  24,W
0137:  BTFSC  03.0
0138:  GOTO   13C
0139:  MOVF   24,W
013A:  MOVWF  77
013B:  GOTO   148
013C:  CLRF   77
013D:  MOVLW  08
013E:  MOVWF  26
013F:  RLF    24,F
0140:  RLF    77,F
0141:  MOVF   25,W
0142:  SUBWF  77,W
0143:  BTFSC  03.0
0144:  MOVWF  77
0145:  RLF    78,F
0146:  DECFSZ 26,F
0147:  GOTO   13F
0148:  RETURN
0149:  MOVF   78,W
014A:  MOVF   22,W
014B:  MOVWF  24
014C:  MOVLW  64
014D:  MOVWF  25
014E:  CALL   134
014F:  MOVF   77,W
0150:  MOVWF  22
0151:  MOVF   78,W
0152:  MOVLW  30
0153:  BTFSS  03.2
0154:  GOTO   15C
0155:  BTFSS  23.1
0156:  GOTO   163
0157:  BTFSC  23.3
0158:  GOTO   163
0159:  BTFSC  23.4
015A:  MOVLW  20
015B:  GOTO   15F
015C:  BCF    23.3
015D:  BCF    23.4
015E:  BSF    23.0
015F:  ADDWF  78,F
0160:  MOVF   78,W
0161:  MOVWF  26
0162:  CALL   068
0163:  MOVF   22,W
0164:  MOVWF  24
0165:  MOVLW  0A
0166:  MOVWF  25
0167:  CALL   134
0168:  MOVF   77,W
0169:  MOVWF  22
016A:  MOVF   78,W
016B:  MOVLW  30
016C:  BTFSS  03.2
016D:  GOTO   174
016E:  BTFSC  23.3
016F:  GOTO   178
0170:  BTFSS  23.0
0171:  GOTO   178
0172:  BTFSC  23.4
0173:  MOVLW  20
0174:  ADDWF  78,F
0175:  MOVF   78,W
0176:  MOVWF  26
0177:  CALL   068
0178:  MOVLW  30
0179:  ADDWF  22,F
017A:  MOVF   22,W
017B:  MOVWF  26
017C:  CALL   068
017D:  BCF    0A.3
017E:  BCF    0A.4
017F:  GOTO   263 (RETURN)
....................  
.................... #list 
....................  
.................... #fuses hs 
.................... #use delay (clock =10M) 
*
002A:  MOVLW  22
002B:  MOVWF  04
002C:  BCF    03.7
002D:  MOVF   00,W
002E:  BTFSC  03.2
002F:  GOTO   03E
0030:  MOVLW  03
0031:  MOVWF  78
0032:  CLRF   77
0033:  DECFSZ 77,F
0034:  GOTO   033
0035:  DECFSZ 78,F
0036:  GOTO   032
0037:  MOVLW  3C
0038:  MOVWF  77
0039:  DECFSZ 77,F
003A:  GOTO   039
003B:  GOTO   03C
003C:  DECFSZ 00,F
003D:  GOTO   030
003E:  RETURN
....................  
.................... #define  lcd_rs      pin_e0 
.................... #define  lcd_rw      pin_e1 
.................... #define  lcd_e       pin_e2 
.................... #define  output_lcd  output_d 
.................... #include<tv_lcd.c> 
.................... void lcd_command(int8 a) 
.................... { 
....................       output_low(lcd_rw); 
*
000F:  BSF    03.5
0010:  BCF    09.1
0011:  BCF    03.5
0012:  BCF    09.1
....................       output_low(lcd_rs); 
0013:  BSF    03.5
0014:  BCF    09.0
0015:  BCF    03.5
0016:  BCF    09.0
....................       output_lcd(a); 
0017:  BSF    03.5
0018:  CLRF   08
0019:  BCF    03.5
001A:  MOVF   22,W
001B:  MOVWF  08
....................       output_high(lcd_e); 
001C:  BSF    03.5
001D:  BCF    09.2
001E:  BCF    03.5
001F:  BSF    09.2
....................       output_low(lcd_e); 
0020:  BSF    03.5
0021:  BCF    09.2
0022:  BCF    03.5
0023:  BCF    09.2
....................       delay_us(50); 
0024:  MOVLW  29
0025:  MOVWF  77
0026:  DECFSZ 77,F
0027:  GOTO   026
0028:  NOP
0029:  RETURN
.................... } 
.................... void lcd_data(int8 a) 
.................... { 
....................       output_low(lcd_rw); 
*
0068:  BSF    03.5
0069:  BCF    09.1
006A:  BCF    03.5
006B:  BCF    09.1
....................       output_high(lcd_rs); 
006C:  BSF    03.5
006D:  BCF    09.0
006E:  BCF    03.5
006F:  BSF    09.0
....................       output_lcd(a); 
0070:  BSF    03.5
0071:  CLRF   08
0072:  BCF    03.5
0073:  MOVF   26,W
0074:  MOVWF  08
....................       output_high(lcd_e); 
0075:  BSF    03.5
0076:  BCF    09.2
0077:  BCF    03.5
0078:  BSF    09.2
....................       output_low(lcd_e); 
0079:  BSF    03.5
007A:  BCF    09.2
007B:  BCF    03.5
007C:  BCF    09.2
....................       delay_us(50); 
007D:  MOVLW  29
007E:  MOVWF  77
007F:  DECFSZ 77,F
0080:  GOTO   07F
0081:  NOP
0082:  RETURN
.................... } 
.................... void lcd_setup() 
.................... { 
....................       lcd_command(0x38); delay_ms(5); 
*
003F:  MOVLW  38
0040:  MOVWF  22
0041:  CALL   00F
0042:  MOVLW  05
0043:  MOVWF  22
0044:  CALL   02A
....................       lcd_command(0x0c); 
0045:  MOVLW  0C
0046:  MOVWF  22
0047:  CALL   00F
....................       lcd_command(0x01); delay_ms(2); 
0048:  MOVLW  01
0049:  MOVWF  22
004A:  CALL   00F
004B:  MOVLW  02
004C:  MOVWF  22
004D:  CALL   02A
004E:  BCF    0A.3
004F:  BCF    0A.4
0050:  GOTO   1C1 (RETURN)
.................... } 
....................  
....................  
.................... unsigned int8 level = 0; 
....................  
....................        
.................... void main() 
*
0180:  MOVF   03,W
0181:  ANDLW  1F
0182:  MOVWF  03
0183:  CLRF   20
0184:  MOVLW  FF
0185:  MOVWF  21
0186:  BSF    03.5
0187:  BSF    03.6
0188:  MOVF   09,W
0189:  ANDLW  C0
018A:  MOVWF  09
018B:  BCF    03.6
018C:  BCF    1F.4
018D:  BCF    1F.5
018E:  MOVLW  00
018F:  BSF    03.6
0190:  MOVWF  08
0191:  BCF    03.5
0192:  CLRF   07
0193:  CLRF   08
0194:  CLRF   09
0195:  BCF    03.7
.................... { 
....................    set_tris_a(0); 
0196:  MOVLW  00
0197:  BSF    03.5
0198:  BCF    03.6
0199:  MOVWF  05
....................    set_tris_b(0xff); 
019A:  MOVLW  FF
019B:  MOVWF  06
....................    set_tris_c(0); 
019C:  MOVLW  00
019D:  MOVWF  07
019E:  BCF    03.5
019F:  MOVWF  21
....................    set_tris_d(0); 
01A0:  BSF    03.5
01A1:  MOVWF  08
....................    set_tris_e(0); 
01A2:  BCF    09.0
01A3:  BCF    09.1
01A4:  BCF    09.2
01A5:  BCF    09.3
....................    setup_timer_2(T2_DIV_BY_16,124,1); 
01A6:  MOVWF  78
01A7:  IORLW  06
01A8:  BCF    03.5
01A9:  MOVWF  12
01AA:  MOVLW  7C
01AB:  BSF    03.5
01AC:  MOVWF  12
....................    setup_ccp2(ccp_pwm); 
01AD:  BCF    03.5
01AE:  BCF    21.1
01AF:  MOVF   21,W
01B0:  BSF    03.5
01B1:  MOVWF  07
01B2:  BCF    03.5
01B3:  BCF    07.1
01B4:  MOVLW  0C
01B5:  MOVWF  1D
....................    set_pwm2_duty((int16)0);   //dung dong co 
01B6:  CLRF   1B
01B7:  MOVF   1D,W
01B8:  ANDLW  CF
01B9:  MOVWF  1D
....................    output_low(pin_c2); 
01BA:  BCF    21.2
01BB:  MOVF   21,W
01BC:  BSF    03.5
01BD:  MOVWF  07
01BE:  BCF    03.5
01BF:  BCF    07.2
....................    lcd_setup(); 
01C0:  GOTO   03F
....................     
....................    while(true) 
....................    { 
....................       if(!input(pin_b5))   // nhan BTN_STOP => dung dong co 
01C1:  BSF    03.5
01C2:  BSF    06.5
01C3:  BCF    03.5
01C4:  BTFSC  06.5
01C5:  GOTO   1D0
....................       { 
....................          set_pwm2_duty((int16)0);   //dung dong co 
01C6:  CLRF   1B
01C7:  MOVF   1D,W
01C8:  ANDLW  CF
01C9:  MOVWF  1D
....................          output_low(pin_c2); 
01CA:  BCF    21.2
01CB:  MOVF   21,W
01CC:  BSF    03.5
01CD:  MOVWF  07
01CE:  BCF    03.5
01CF:  BCF    07.2
....................       
....................       } 
....................       if(!input(pin_b6)) 
01D0:  BSF    03.5
01D1:  BSF    06.6
01D2:  BCF    03.5
01D3:  BTFSC  06.6
01D4:  GOTO   1FE
....................       { 
....................          if(!input(pin_b0))   level =1; 
01D5:  BSF    03.5
01D6:  BSF    06.0
01D7:  BCF    03.5
01D8:  BTFSC  06.0
01D9:  GOTO   1DC
01DA:  MOVLW  01
01DB:  MOVWF  20
....................          if(!input(pin_b1))   level =2; 
01DC:  BSF    03.5
01DD:  BSF    06.1
01DE:  BCF    03.5
01DF:  BTFSC  06.1
01E0:  GOTO   1E3
01E1:  MOVLW  02
01E2:  MOVWF  20
....................          if(!input(pin_b2))   level =3; 
01E3:  BSF    03.5
01E4:  BSF    06.2
01E5:  BCF    03.5
01E6:  BTFSC  06.2
01E7:  GOTO   1EA
01E8:  MOVLW  03
01E9:  MOVWF  20
....................          if(!input(pin_b3))   level =4; 
01EA:  BSF    03.5
01EB:  BSF    06.3
01EC:  BCF    03.5
01ED:  BTFSC  06.3
01EE:  GOTO   1F1
01EF:  MOVLW  04
01F0:  MOVWF  20
....................          if(!input(pin_b4))   level =5; 
01F1:  BSF    03.5
01F2:  BSF    06.4
01F3:  BCF    03.5
01F4:  BTFSC  06.4
01F5:  GOTO   1F8
01F6:  MOVLW  05
01F7:  MOVWF  20
....................          if(!input(pin_b5))   break; 
01F8:  BSF    03.5
01F9:  BSF    06.5
01FA:  BCF    03.5
01FB:  BTFSS  06.5
01FC:  GOTO   264
....................           
....................       } 
01FD:  GOTO   226
....................       else 
....................       { 
....................          if(!input(pin_b0))   level =6; 
01FE:  BSF    03.5
01FF:  BSF    06.0
0200:  BCF    03.5
0201:  BTFSC  06.0
0202:  GOTO   205
0203:  MOVLW  06
0204:  MOVWF  20
....................          if(!input(pin_b1))   level =7; 
0205:  BSF    03.5
0206:  BSF    06.1
0207:  BCF    03.5
0208:  BTFSC  06.1
0209:  GOTO   20C
020A:  MOVLW  07
020B:  MOVWF  20
....................          if(!input(pin_b2))   level =8; 
020C:  BSF    03.5
020D:  BSF    06.2
020E:  BCF    03.5
020F:  BTFSC  06.2
0210:  GOTO   213
0211:  MOVLW  08
0212:  MOVWF  20
....................          if(!input(pin_b3))   level =9; 
0213:  BSF    03.5
0214:  BSF    06.3
0215:  BCF    03.5
0216:  BTFSC  06.3
0217:  GOTO   21A
0218:  MOVLW  09
0219:  MOVWF  20
....................          if(!input(pin_b4))   level =10; 
021A:  BSF    03.5
021B:  BSF    06.4
021C:  BCF    03.5
021D:  BTFSC  06.4
021E:  GOTO   221
021F:  MOVLW  0A
0220:  MOVWF  20
....................          if(!input(pin_b5))   break; 
0221:  BSF    03.5
0222:  BSF    06.5
0223:  BCF    03.5
0224:  BTFSS  06.5
0225:  GOTO   264
....................       } 
....................        
....................       set_pwm2_duty((int16)level*50); 
0226:  CLRF   23
0227:  MOVF   20,W
0228:  MOVWF  22
0229:  MOVF   23,W
022A:  MOVWF  25
022B:  MOVF   20,W
022C:  MOVWF  24
022D:  CLRF   27
022E:  MOVLW  32
022F:  MOVWF  26
0230:  GOTO   051
0231:  MOVF   79,W
0232:  MOVWF  23
0233:  MOVF   78,W
0234:  MOVWF  22
0235:  RRF    23,F
0236:  RRF    22,F
0237:  RRF    23,F
0238:  RRF    22,F
0239:  RRF    23,F
023A:  MOVF   22,W
023B:  MOVWF  1B
023C:  RRF    23,F
023D:  RRF    23,W
023E:  ANDLW  30
023F:  MOVWF  77
0240:  MOVF   1D,W
0241:  ANDLW  CF
0242:  IORWF  77,W
0243:  MOVWF  1D
....................       delay_ms(100); 
0244:  MOVLW  64
0245:  MOVWF  22
0246:  CALL   02A
....................       lcd_command(0x80 + 3); 
0247:  MOVLW  83
0248:  MOVWF  22
0249:  CALL   00F
....................       lcd_data("DONG CO DC"); 
024A:  MOVLW  04
024B:  BSF    03.6
024C:  MOVWF  0D
024D:  MOVLW  00
024E:  MOVWF  0F
024F:  BCF    03.6
0250:  GOTO   083
....................       lcd_command(0xc0 + 4); 
0251:  MOVLW  C4
0252:  MOVWF  22
0253:  CALL   00F
....................       printf(lcd_data,"LEVEL:%2u",level); 
0254:  MOVLW  0A
0255:  BSF    03.6
0256:  MOVWF  0D
0257:  MOVLW  00
0258:  MOVWF  0F
0259:  BCF    03.0
025A:  MOVLW  06
025B:  BCF    03.6
025C:  MOVWF  22
025D:  GOTO   0DB
025E:  MOVF   20,W
025F:  MOVWF  22
0260:  MOVLW  11
0261:  MOVWF  23
0262:  GOTO   149
0263:  GOTO   1C1
....................    } 
....................     
.................... } 
0264:  SLEEP

Configuration Fuses:
   Word  1: 2FE2   HS NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
